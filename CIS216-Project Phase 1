import sqlite3

DB_NAME = 'employee_data.db'
conn = sqlite3.connect(DB_NAME)
cursor = conn.cursor()

def main():
    create_db_if_not_exists()
        
    while True:
        command = input("Enter a command (add, view, totals, end): ")
        if command == "add":
            add_employee()
        elif command == "view":
            employee_name = input("Enter an employee name to view, or press enter to view all: ")
            print()
            print()
            display_employee_info(employee_name)
        elif command == "totals":
            display_totals()
        elif command == "end":
            conn.commit()
            conn.close()
            exit()
        else:
            print("Invalid command. Please enter add, view, totals, or end.")

def create_db_if_not_exists():
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS employees
        (id INTEGER PRIMARY KEY AUTOINCREMENT,
         name TEXT NOT NULL,
         hours_worked REAL NOT NULL,
         hourly_rate REAL NOT NULL,
         tax_rate REAL NOT NULL,
         gross_pay REAL NOT NULL,
         tax REAL NOT NULL,
         net_pay REAL NOT NULL)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS totals
        (id INTEGER PRIMARY KEY,
         total_hours REAL NOT NULL,
         total_gross REAL NOT NULL,
         total_net REAL NOT NULL,
         total_employees INTEGER NOT NULL)''')


    cursor.execute("INSERT OR IGNORE INTO totals (id, total_hours, total_gross, total_net, total_employees) VALUES (1, 0, 0, 0, 0)")

    conn.commit()

def add_employee():
    first_name = input("Enter employee's first name: ").capitalize()
    last_name = input("Enter employee's last name: ").capitalize()
    name = f"{first_name} {last_name}"
    hours_worked = float(input("Enter hours worked: "))
    hourly_rate = float(input("Enter hourly rate: "))
    tax_rate = float(input("Enter tax rate: "))

    try:
        gross_pay, tax, net_pay = calculate_pay(hours_worked, hourly_rate, tax_rate)
    except ValueError:
        print("Error adding employee: Invalid input data.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO employees (name, hours_worked, hourly_rate, tax_rate, gross_pay, tax, net_pay)
                      VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, hours_worked, hourly_rate, tax_rate, gross_pay, tax, net_pay))

    cursor.execute("UPDATE totals SET total_hours = total_hours + ?, total_gross = total_gross + ?, total_net = total_net + ?, total_employees = total_employees + 1 WHERE id = 1", (hours_worked, gross_pay, net_pay))

    conn.commit()
    print(f"{name} added to employee data.")

def calculate_pay(hours_worked, hourly_rate, tax_rate):
    overtime_rate = hourly_rate * 1.5
    if hours_worked > 40:
        overtime_hours = hours_worked - 40
        regular_pay = 40 * hourly_rate
        overtime_pay = overtime_hours * overtime_rate
        gross_pay = regular_pay + overtime_pay
    else:
        gross_pay = hours_worked * hourly_rate
    tax = gross_pay * (tax_rate / 100)
    net_pay = gross_pay - tax
    return gross_pay, tax, net_pay

def display_employee_info(employee_name=None):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    if employee_name:
        cursor.execute("SELECT * FROM employees WHERE name=?", (employee_name,))
    else:
        cursor.execute("SELECT * FROM employees")

    rows = cursor.fetchall()

    if not rows:
        print("No results found.")
        return

    for row in rows:
        print("Employee Name:", row[1])
        print("Hours Worked:", row[2])
        print("Hourly Rate:", row[3])
        print("Tax:", row[6])
        print("Net Pay:", row[7])
        print("Gross Pay:", row[5])
        print()
        print()

def display_totals():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT total_hours, total_gross, total_net, total_employees FROM totals WHERE id = 1")
    result = cursor.fetchone()
    print(f"Total hours worked: {result[0]}")
    print(f"Total gross pay: ${result[1]:,.2f}")
    print(f"Total net pay: ${result[2]:,.2f}")
    print(f"Total employees: {result[3]}")


if __name__ == '__main__':
    main()
